/**
 * this高频面试问题
 * 
 */

/**
 * 首先得搞懂什么是执行上下文？
 * 
 * 执行上下文：
 *    就是当前 JavaScript 代码被解析和执行时所在的环境，也叫作执行环境。JavaScript 中运行任何的代码都是在执行上下文中运行，在该执行上下文的创建阶段，变量对象（Variable Object，本文接下来会详述）、作用域链、this 指向会分别被确定。
 * 
 * 执行上下文有三种类型：
 * 全局执行上下文：
 *    默认创建的，一个程序只能有一个，所有函数都在全局执行上下文中，它做了两件事
 *      1. 创建一个全局对象，在浏览器中就是 window
 *      2. 将 this 指针指向这个 window
 * 函数执行上下文：
 *    每次调用函数都会为函数创建一个新的执行上下文，每个函数都有自己的执行上下文，但只有被调用的时候才会被创建。
 *    一个程序中可以存在任意数量的函数执行上下文。
 * eavl 执行上下文：
 *    运行在 eval 函数中的代码也获得了自己的执行上下文，ES6 之后不再推荐使用 eval 函数
 * 
 *
 * 执行上下文的生命周期：
 *    创建阶段 → 执行阶段 → 回收阶段
 * 
 * 创建阶段：
 *    当函数被调用，但未执行任何其内部代码之前，会做以下三件事：
 *     1. 创建变量对象：
 *        首先初始化函数的参数arguments，提升函数声明和变量声明。
 *     2. 创建作用域链：
 *        在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。
 *        作用域链本身包含变量对象。作用域链用于解析变量。
 *        当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。
 *     3. 确定this指向
 * 
 * 执行阶段：
 *    创建完成之后，就会开始执行代码，在这个阶段，会完成变量赋值、函数引用、以及执行其他代码。
 * 
 * 回收阶段：
 *    函数调用完毕后，函数出栈，对应的执行上下文也出栈，等待垃圾回收器回收执行上下文。
 */


/**
 * this 指向问题
 * 
 * this 既不指向函数自身也不指向函数的作用域，这之前是很多前端工程师容易误解的地方，现在澄清一下。
 * 1. this 指向是在函数被调用的时候确定的，也就是执行上下文被创建的时候确定的；
 * 2. this 指向与函数声明的位置没有任何关系，只取决于函数被调用的位置（即由谁在什么地方调用这个函数）；
 * 3. 因为在执行上下文时 this 的执向就已经确定了，所以在执行阶段不可修改 this 指向；
 */